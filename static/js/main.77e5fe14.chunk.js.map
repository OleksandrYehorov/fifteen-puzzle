{"version":3,"sources":["components/FifteenPuzzleCell.tsx","utils/randomInteger.ts","services/fifteen-puzzle-service.ts","utils/constants.ts","utils/vibrate.ts","components/FifteenPuzzleGame.tsx","hooks/useGame.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","styled","li","coordinates","row","col","CellContent","div","CellValue","span","FifteenPuzzleCell","cell","onClick","value","style","opacity","undefined","randomInteger","min","max","rand","Math","random","floor","FifteenPuzzle","cellsData","this","getInitialCellsData","Array","from","map","_","index","clickedCell","emptyCell","getEmptyCell","find","clickedCellValue","clickSide","getMoveSide","newEmptyCellCoordinates","filter","forEach","emptyCellPosition","getCellPosition","every","position","movesAmount","i","cellToMove","makeMove","checkWin","vibrate","pattern","navigator","Game","BoardWrapper","Board","ul","props","isWin","Button","button","BoardLabel","h2","Header","header","Footer","footer","Moves","p","moveVibrationPattern","FifteenPuzzleGame","game","useState","useGame","cells","setCellsData","setIsWin","isPlaying","setIsPlaying","moves","setMoves","handleCellClick","useEffect","startButtonText","cellData","key","shuffle","interval","setTimeout","Main","main","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.77e5fe14.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components/macro';\r\n\r\nexport interface Coordinates {\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\nexport interface Cell {\r\n  value: number;\r\n  coordinates: Coordinates;\r\n}\r\n\r\ninterface Props {\r\n  cell: Cell;\r\n  onClick?: (cellValue: number) => void;\r\n}\r\n\r\ninterface CellProps {\r\n  coordinates: Coordinates;\r\n}\r\n\r\nconst Cell = styled.li<CellProps>`\r\n  padding: 0.2rem;\r\n  box-sizing: border-box;\r\n  width: 25%;\r\n  height: 25%;\r\n  list-style-type: none;\r\n  position: absolute;\r\n  top: ${({ coordinates }) => coordinates.row * 25}%;\r\n  left: ${({ coordinates }) => coordinates.col * 25}%;\r\n  transition: top 0.5s ease-out, left 0.5s ease-out;\r\n  -webkit-tap-highlight-color: transparent;\r\n`;\r\n\r\nconst CellContent = styled.div`\r\n  box-sizing: border-box;\r\n  height: 100%;\r\n  background-color: rgb(42, 45, 51);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 0.3rem;\r\n`;\r\n\r\nconst CellValue = styled.span`\r\n  font-size: 2rem;\r\n`;\r\n\r\nexport const FifteenPuzzleCell: React.FC<Props> = ({ cell, onClick }) => {\r\n  if (cell.value === 16) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Cell\r\n      coordinates={cell.coordinates}\r\n      onClick={() => {\r\n        if (onClick) onClick(cell.value);\r\n      }}\r\n      style={cell.value === 16 ? { opacity: 0.5 } : undefined}\r\n    >\r\n      <CellContent>\r\n        <CellValue>{cell.value}</CellValue>\r\n      </CellContent>\r\n    </Cell>\r\n  );\r\n};\r\n","export const randomInteger = (min: number, max: number): number => {\r\n  const rand = min + Math.random() * (max + 1 - min);\r\n\r\n  return Math.floor(rand);\r\n};\r\n","import { Cell, Coordinates } from '../components/FifteenPuzzleCell';\r\nimport { randomInteger } from '../utils/randomInteger';\r\n\r\nexport type Side = 'top' | 'bottom' | 'left' | 'right';\r\n\r\nexport class FifteenPuzzle {\r\n  static getCellPosition(cell: Cell) {\r\n    return cell.coordinates.row * 4 + cell.coordinates.col;\r\n  }\r\n\r\n  private cellsData: Cell[] = this.getInitialCellsData();\r\n\r\n  private getInitialCellsData(): Cell[] {\r\n    const newCellsData: Cell[] = Array.from(Array(16)).map(\r\n      (_, index): Cell => ({\r\n        value: index + 1,\r\n        coordinates: {\r\n          row: Math.floor(index / 4),\r\n          col: index % 4,\r\n        },\r\n      }),\r\n    );\r\n\r\n    return newCellsData;\r\n  }\r\n\r\n  get cells(): Cell[] {\r\n    return this.cellsData.map(\r\n      (cell): Cell => ({\r\n        ...cell,\r\n        coordinates: { ...cell.coordinates },\r\n      }),\r\n    );\r\n  }\r\n\r\n  private getMoveSide(clickedCell: Cell, emptyCell = this.getEmptyCell()) {\r\n    if (!emptyCell) return null;\r\n\r\n    if (clickedCell.coordinates.col === emptyCell.coordinates.col) {\r\n      if (clickedCell.coordinates.row < emptyCell.coordinates.row) {\r\n        return 'top';\r\n      } else {\r\n        return 'bottom';\r\n      }\r\n    } else if (clickedCell.coordinates.row === emptyCell.coordinates.row) {\r\n      if (clickedCell.coordinates.col < emptyCell.coordinates.col) {\r\n        return 'left';\r\n      } else {\r\n        return 'right';\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private getEmptyCell() {\r\n    return this.cellsData.find((cell) => cell.value === 16);\r\n  }\r\n\r\n  makeMove(clickedCellValue: number): boolean {\r\n    const clickedCell = this.cellsData.find(\r\n      (cell) => cell.value === clickedCellValue,\r\n    );\r\n    if (!clickedCell) return false;\r\n\r\n    const emptyCell = this.getEmptyCell();\r\n    if (!emptyCell) return false;\r\n\r\n    const clickSide = this.getMoveSide(clickedCell, emptyCell);\r\n    if (!clickSide) return false;\r\n\r\n    const newEmptyCellCoordinates: Coordinates = {\r\n      ...clickedCell.coordinates,\r\n    };\r\n\r\n    if (clickSide === 'top') {\r\n      const cellsToMove = this.cellsData.filter(\r\n        (cell) =>\r\n          cell.coordinates.col === emptyCell.coordinates.col &&\r\n          cell.coordinates.row < emptyCell.coordinates.row &&\r\n          cell.coordinates.row >= clickedCell.coordinates.row,\r\n      );\r\n\r\n      cellsToMove.forEach((cell) => {\r\n        cell.coordinates.row++;\r\n      });\r\n    } else if (clickSide === 'bottom') {\r\n      const cellsToMove = this.cellsData.filter(\r\n        (cell) =>\r\n          cell.coordinates.col === emptyCell.coordinates.col &&\r\n          cell.coordinates.row > emptyCell.coordinates.row &&\r\n          cell.coordinates.row <= clickedCell.coordinates.row,\r\n      );\r\n\r\n      cellsToMove.forEach((cell) => {\r\n        cell.coordinates.row--;\r\n      });\r\n    } else if (clickSide === 'left') {\r\n      const cellsToMove = this.cellsData.filter(\r\n        (cell) =>\r\n          cell.coordinates.row === emptyCell.coordinates.row &&\r\n          cell.coordinates.col < emptyCell.coordinates.col &&\r\n          cell.coordinates.col >= clickedCell.coordinates.col,\r\n      );\r\n\r\n      cellsToMove.forEach((cell) => {\r\n        cell.coordinates.col++;\r\n      });\r\n    } else if (clickSide === 'right') {\r\n      const cellsToMove = this.cellsData.filter(\r\n        (cell) =>\r\n          cell.coordinates.row === emptyCell.coordinates.row &&\r\n          cell.coordinates.col > emptyCell.coordinates.col &&\r\n          cell.coordinates.col <= clickedCell.coordinates.col,\r\n      );\r\n\r\n      cellsToMove.forEach((cell) => {\r\n        cell.coordinates.col--;\r\n      });\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n    emptyCell.coordinates = newEmptyCellCoordinates;\r\n\r\n    return true;\r\n  }\r\n\r\n  checkWin(): boolean {\r\n    const emptyCell = this.getEmptyCell();\r\n    if (!emptyCell) return false;\r\n\r\n    const emptyCellPosition = FifteenPuzzle.getCellPosition(emptyCell);\r\n\r\n    const isWin = this.cellsData\r\n      .filter((cell) => cell.value !== 16)\r\n      .every((cell, index) => {\r\n        let position = FifteenPuzzle.getCellPosition(cell);\r\n        if (position > emptyCellPosition) position--;\r\n\r\n        return position === index;\r\n      });\r\n\r\n    return isWin;\r\n  }\r\n\r\n  shuffle(): void {\r\n    do {\r\n      const movesAmount = randomInteger(50, 100);\r\n      let i = 0;\r\n\r\n      while (i < movesAmount) {\r\n        const cellToMove = randomInteger(1, 15);\r\n        if (this.makeMove(cellToMove)) i++;\r\n      }\r\n    } while (this.checkWin());\r\n  }\r\n}\r\n","export const ANIMATION_DURATION = 50;\r\n","export const vibrate: typeof navigator.vibrate = (pattern) => {\r\n  if ('vibrate' in navigator) {\r\n    return navigator.vibrate(pattern);\r\n  }\r\n\r\n  return false;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { FifteenPuzzleCell } from './FifteenPuzzleCell';\r\nimport { useGame } from '../hooks/useGame';\r\nimport { ANIMATION_DURATION, vibrate } from '../utils';\r\n\r\nconst Game = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0 0.6rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst BoardWrapper = styled.div`\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 26rem;\r\n  &:after {\r\n    content: '';\r\n    display: block;\r\n    padding-bottom: 100%;\r\n  }\r\n`;\r\n\r\ninterface BoardProps {\r\n  isWin: boolean;\r\n}\r\n\r\nconst Board = styled.ul<BoardProps>`\r\n  position: absolute;\r\n  top: 0;\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgb(82, 85, 91);\r\n  border-radius: 0.5rem;\r\n  user-select: none;\r\n  transition: ${ANIMATION_DURATION}ms filter ease-in-out;\r\n  filter: blur(${(props) => (props.isWin ? 0.2 : 0)}rem);\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-top: 1rem;\r\n  border: none;\r\n  background: none;\r\n  padding: 0.5rem 1rem;\r\n  font-size: 2rem;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  outline: none;\r\n`;\r\n\r\nconst BoardLabel = styled.h2`\r\n  position: absolute;\r\n  margin: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 2.4rem;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  flex-grow: 1;\r\n  flex-shrink: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nconst Footer = styled.footer`\r\n  flex-grow: 1;\r\n  flex-shrink: 0;\r\n`;\r\n\r\nconst Moves = styled.p`\r\n  font-size: 1.8rem;\r\n  margin-top: 0;\r\n`;\r\n\r\nconst moveVibrationPattern = [50, ANIMATION_DURATION, 50];\r\n\r\nexport const FifteenPuzzleGame: React.FC = () => {\r\n  const game = useGame();\r\n  const [cellsData, setCellsData] = useState(game.cells);\r\n  const [isWin, setIsWin] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [moves, setMoves] = useState(0);\r\n\r\n  const handleCellClick = (clickedCellValue: number) => {\r\n    if (game.makeMove(clickedCellValue)) {\r\n      vibrate(moveVibrationPattern);\r\n      setCellsData(game.cells);\r\n      setIsWin(game.checkWin());\r\n      setMoves((moves) => moves + 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCellsData(game.cells);\r\n  }, [game]);\r\n\r\n  useEffect(() => {\r\n    if (isWin) {\r\n      setIsPlaying(false);\r\n    }\r\n  }, [isWin]);\r\n\r\n  const handleStartGame = () => {\r\n    const shuffleIntervals = [0, 300, 600];\r\n    const shuffle = () => {\r\n      game.shuffle();\r\n      vibrate(moveVibrationPattern);\r\n      setCellsData(game.cells);\r\n    };\r\n\r\n    setIsPlaying(true);\r\n    setIsWin(false);\r\n    setMoves(0);\r\n    shuffleIntervals.forEach((interval) => setTimeout(shuffle, interval));\r\n  };\r\n\r\n  let startButtonText = 'Play';\r\n  if (isWin) startButtonText = 'Play again';\r\n  if (isPlaying) startButtonText = 'Restart';\r\n\r\n  return (\r\n    <Game>\r\n      <Header>\r\n        <Moves>Moves: {moves}</Moves>\r\n      </Header>\r\n      <BoardWrapper>\r\n        <Board isWin={isWin}>\r\n          {cellsData.map((cellData) => (\r\n            <FifteenPuzzleCell\r\n              key={cellData.value}\r\n              cell={cellData}\r\n              onClick={isPlaying ? handleCellClick : undefined}\r\n            />\r\n          ))}\r\n        </Board>\r\n        {isWin && <BoardLabel>WIN</BoardLabel>}\r\n      </BoardWrapper>\r\n      <Footer>\r\n        <Button onClick={handleStartGame}>{startButtonText}</Button>\r\n      </Footer>\r\n    </Game>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { FifteenPuzzle } from '../services/fifteen-puzzle-service';\r\n\r\nexport function useGame(): FifteenPuzzle {\r\n  const [game] = useState(() => new FifteenPuzzle());\r\n\r\n  return game;\r\n}\r\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport { FifteenPuzzleGame } from './components/FifteenPuzzleGame';\n\nconst Main = styled.main`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgb(34, 36, 41);\n  color: rgb(224, 228, 228);\n`;\n\nexport const App = () => {\n  return (\n    <Main>\n      <FifteenPuzzleGame />\n    </Main>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { register } from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\nregister();\n"],"sourceRoot":""}