{"version":3,"sources":["components/FifteenPuzzleCell.tsx","services/fifteen-puzzle-service.ts","components/FifteenPuzzle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","styled","li","coordinates","row","col","CellContent","div","CellValue","span","FifteenPuzzleCell","cell","onClick","value","style","opacity","undefined","FifteenPuzzleService","cellsData","this","getInitialCellsData","Array","from","map","_","index","Math","floor","clickedCell","emptyCell","getEmptyCell","find","clickedCellValue","clickSide","getMoveSide","newEmptyCellCoordinates","filter","forEach","emptyCellPosition","getCellPosition","every","position","movesAmount","randomInteger","i","makeMove","min","max","rand","random","Game","BoardWrapper","Board","ul","props","isWin","Button","button","BoardLabel","h2","FifteenPuzzle","game","useRef","current","useState","cells","setCellsData","setIsWin","isPlaying","setIsPlaying","handleCellClick","checkWin","useEffect","startButtonText","flexGrow","cellData","key","shuffle","interval","setTimeout","Main","main","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0ec5b969.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components/macro';\r\n\r\nexport interface CellCoordinates {\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\nexport interface Cell {\r\n  value: number;\r\n  coordinates: CellCoordinates;\r\n}\r\n\r\ninterface Props {\r\n  cell: Cell;\r\n  onClick?: (cellValue: number) => void;\r\n}\r\n\r\ninterface CellProps {\r\n  coordinates: CellCoordinates;\r\n}\r\n\r\nconst Cell = styled.li<CellProps>`\r\n  padding: 0.2rem;\r\n  box-sizing: border-box;\r\n  width: 25%;\r\n  height: 25%;\r\n  list-style-type: none;\r\n  position: absolute;\r\n  top: ${({ coordinates }) => coordinates.row * 25}%;\r\n  left: ${({ coordinates }) => coordinates.col * 25}%;\r\n  transition: top 0.5s ease-out, left 0.5s ease-out;\r\n  -webkit-tap-highlight-color: transparent;\r\n`;\r\n\r\nconst CellContent = styled.div`\r\n  box-sizing: border-box;\r\n  height: 100%;\r\n  background-color: rgb(42, 45, 51);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 0.3rem;\r\n`;\r\n\r\nconst CellValue = styled.span`\r\n  font-size: 2rem;\r\n`;\r\n\r\nexport const FifteenPuzzleCell: React.FC<Props> = ({ cell, onClick }) => {\r\n  const handleClick = () => {\r\n    if (onClick) onClick(cell.value);\r\n  };\r\n\r\n  if (cell.value === 16) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Cell\r\n      coordinates={cell.coordinates}\r\n      onClick={handleClick}\r\n      style={cell.value === 16 ? { opacity: 0.5 } : undefined}\r\n    >\r\n      <CellContent>\r\n        <CellValue>{cell.value}</CellValue>\r\n      </CellContent>\r\n    </Cell>\r\n  );\r\n};\r\n","import { Cell, CellCoordinates } from '../components/FifteenPuzzleCell';\r\nimport { useRef } from 'react';\r\n\r\nexport type Side = 'top' | 'bottom' | 'left' | 'right';\r\n\r\nexport class FifteenPuzzleService {\r\n  static getCellPosition(cell: Cell) {\r\n    return cell.coordinates.row * 4 + cell.coordinates.col;\r\n  }\r\n\r\n  private cellsData: Cell[] = this.getInitialCellsData();\r\n\r\n  private getInitialCellsData(): Cell[] {\r\n    const newCellsData: Cell[] = Array.from(Array(16)).map(\r\n      (_, index): Cell => ({\r\n        value: index + 1,\r\n        coordinates: {\r\n          row: Math.floor(index / 4),\r\n          col: index % 4,\r\n        },\r\n      }),\r\n    );\r\n\r\n    return newCellsData;\r\n  }\r\n\r\n  get cells(): Cell[] {\r\n    return this.cellsData.map(\r\n      (cell): Cell => ({\r\n        ...cell,\r\n        coordinates: { ...cell.coordinates },\r\n      }),\r\n    );\r\n  }\r\n\r\n  private getMoveSide(clickedCell: Cell, emptyCell = this.getEmptyCell()) {\r\n    if (!emptyCell) return null;\r\n\r\n    if (clickedCell.coordinates.col === emptyCell.coordinates.col) {\r\n      if (clickedCell.coordinates.row < emptyCell.coordinates.row) {\r\n        return 'top';\r\n      } else {\r\n        return 'bottom';\r\n      }\r\n    } else if (clickedCell.coordinates.row === emptyCell.coordinates.row) {\r\n      if (clickedCell.coordinates.col < emptyCell.coordinates.col) {\r\n        return 'left';\r\n      } else {\r\n        return 'right';\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private getEmptyCell() {\r\n    return this.cellsData.find((cell) => cell.value === 16);\r\n  }\r\n\r\n  makeMove(clickedCellValue: number): boolean {\r\n    const clickedCell = this.cellsData.find(\r\n      (cell) => cell.value === clickedCellValue,\r\n    );\r\n    if (!clickedCell) return false;\r\n\r\n    const emptyCell = this.getEmptyCell();\r\n    if (!emptyCell) return false;\r\n\r\n    const clickSide = this.getMoveSide(clickedCell, emptyCell);\r\n    if (!clickSide) return false;\r\n\r\n    const newEmptyCellCoordinates: CellCoordinates = {\r\n      ...clickedCell.coordinates,\r\n    };\r\n\r\n    if (clickSide === 'top') {\r\n      const cellsToMove = this.cellsData.filter(\r\n        (cell) =>\r\n          cell.coordinates.col === emptyCell.coordinates.col &&\r\n          cell.coordinates.row < emptyCell.coordinates.row &&\r\n          cell.coordinates.row >= clickedCell.coordinates.row,\r\n      );\r\n\r\n      cellsToMove.forEach((cell) => {\r\n        cell.coordinates.row++;\r\n      });\r\n    } else if (clickSide === 'bottom') {\r\n      const cellsToMove = this.cellsData.filter(\r\n        (cell) =>\r\n          cell.coordinates.col === emptyCell.coordinates.col &&\r\n          cell.coordinates.row > emptyCell.coordinates.row &&\r\n          cell.coordinates.row <= clickedCell.coordinates.row,\r\n      );\r\n\r\n      cellsToMove.forEach((cell) => {\r\n        cell.coordinates.row--;\r\n      });\r\n    } else if (clickSide === 'left') {\r\n      const cellsToMove = this.cellsData.filter(\r\n        (cell) =>\r\n          cell.coordinates.row === emptyCell.coordinates.row &&\r\n          cell.coordinates.col < emptyCell.coordinates.col &&\r\n          cell.coordinates.col >= clickedCell.coordinates.col,\r\n      );\r\n\r\n      cellsToMove.forEach((cell) => {\r\n        cell.coordinates.col++;\r\n      });\r\n    } else if (clickSide === 'right') {\r\n      const cellsToMove = this.cellsData.filter(\r\n        (cell) =>\r\n          cell.coordinates.row === emptyCell.coordinates.row &&\r\n          cell.coordinates.col > emptyCell.coordinates.col &&\r\n          cell.coordinates.col <= clickedCell.coordinates.col,\r\n      );\r\n\r\n      cellsToMove.forEach((cell) => {\r\n        cell.coordinates.col--;\r\n      });\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n    emptyCell.coordinates = newEmptyCellCoordinates;\r\n\r\n    return true;\r\n  }\r\n\r\n  checkWin(): boolean {\r\n    const emptyCell = this.getEmptyCell();\r\n    if (!emptyCell) return false;\r\n\r\n    const emptyCellPosition = FifteenPuzzleService.getCellPosition(emptyCell);\r\n\r\n    const isWin = this.cellsData\r\n      .filter((cell) => cell.value !== 16)\r\n      .every((cell, index) => {\r\n        let position = FifteenPuzzleService.getCellPosition(cell);\r\n        if (position > emptyCellPosition) position--;\r\n\r\n        return position === index;\r\n      });\r\n\r\n    return isWin;\r\n  }\r\n\r\n  shuffle(): void {\r\n    const movesAmount = randomInteger(30, 60);\r\n    let i = 0;\r\n\r\n    while (i < movesAmount) {\r\n      if (this.makeMove(randomInteger(1, 15))) i++;\r\n    }\r\n  }\r\n}\r\n\r\nfunction randomInteger(min: number, max: number): number {\r\n  let rand = min + Math.random() * (max + 1 - min);\r\n  return Math.floor(rand);\r\n}\r\n\r\nexport function useFifteenPuzzleGame(): FifteenPuzzleService {\r\n  const gameRef = useRef(new FifteenPuzzleService());\r\n\r\n  return gameRef.current;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { FifteenPuzzleCell } from './FifteenPuzzleCell';\r\nimport styled from 'styled-components/macro';\r\nimport { useFifteenPuzzleGame } from '../services/fifteen-puzzle-service';\r\n\r\nconst Game = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0 0.6rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst BoardWrapper = styled.div`\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 26rem;\r\n  &:after {\r\n    content: '';\r\n    display: block;\r\n    padding-bottom: 100%;\r\n  }\r\n`;\r\n\r\ninterface BoardProps {\r\n  isWin: boolean;\r\n}\r\n\r\nconst Board = styled.ul<BoardProps>`\r\n  position: absolute;\r\n  top: 0;\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgb(82, 85, 91);\r\n  border-radius: 0.5rem;\r\n  user-select: none;\r\n  transition: 0.2s filter ease-in-out;\r\n  filter: blur(${(props) => (props.isWin ? 0.2 : 0)}rem);\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-top: 1rem;\r\n  border: none;\r\n  background: none;\r\n  padding: 0.5rem 1rem;\r\n  font-size: 2rem;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  outline: none;\r\n`;\r\n\r\nconst BoardLabel = styled.h2`\r\n  position: absolute;\r\n  margin: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 2.4rem;\r\n`;\r\n\r\nexport const FifteenPuzzle: React.FC = () => {\r\n  const game = useFifteenPuzzleGame();\r\n  const [cellsData, setCellsData] = useState(game.cells);\r\n  const [isWin, setIsWin] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  const handleCellClick = (clickedCellValue: number) => {\r\n    const success = game.makeMove(clickedCellValue);\r\n    if (success) {\r\n      setCellsData(game.cells);\r\n      setIsWin(game.checkWin());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCellsData(game.cells);\r\n  }, [game]);\r\n\r\n  useEffect(() => {\r\n    if (isWin) {\r\n      setIsPlaying(false);\r\n    }\r\n  }, [isWin]);\r\n\r\n  const handleStartGame = () => {\r\n    const shuffleIntervals = [0, 300, 600, 900];\r\n    const shuffle = () => {\r\n      game.shuffle();\r\n      setCellsData(game.cells);\r\n    };\r\n\r\n    setIsPlaying(true);\r\n    setIsWin(false);\r\n    shuffleIntervals.forEach((interval) => setTimeout(shuffle, interval));\r\n  };\r\n\r\n  let startButtonText = 'Play';\r\n  if (isWin) startButtonText = 'Play again';\r\n  if (isPlaying) startButtonText = 'Restart';\r\n\r\n  return (\r\n    <Game>\r\n      <header style={{ flexGrow: 1 }}></header>\r\n      <BoardWrapper>\r\n        <Board isWin={isWin}>\r\n          {cellsData.map((cellData) => (\r\n            <FifteenPuzzleCell\r\n              key={cellData.value}\r\n              cell={cellData}\r\n              onClick={isPlaying ? handleCellClick : undefined}\r\n            />\r\n          ))}\r\n        </Board>\r\n        {isWin && <BoardLabel>WIN</BoardLabel>}\r\n      </BoardWrapper>\r\n      <footer style={{ flexGrow: 1 }}>\r\n        <Button onClick={handleStartGame}>{startButtonText}</Button>\r\n      </footer>\r\n    </Game>\r\n  );\r\n};\r\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\nimport { FifteenPuzzle } from './components/FifteenPuzzle';\n\nconst Main = styled.main`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgb(34, 36, 41);\n  color: rgb(224, 228, 228);\n`;\n\nexport const App = () => {\n  return (\n    <Main>\n      <FifteenPuzzle />\n    </Main>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { register } from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregister();\n"],"sourceRoot":""}